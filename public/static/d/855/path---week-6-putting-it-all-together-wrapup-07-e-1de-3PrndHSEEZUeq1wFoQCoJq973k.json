{"data":{"markdownRemark":{"html":"<h2>Introduction</h2>\n<blockquote>\n<p>Function pointers are literally pointers to functions.</p>\n</blockquote>\n<p>Function pointers are just what their name suggests, they are pointers to functions! In particular, a function pointer points to code (rather than data like what we are normally used to) and stores the start of executable code. Let’s just get straight to some code.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">void print_stuff<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi there, I am %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">int</span> main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">//</span> Pointer <span class=\"token keyword\">is</span> void <span class=\"token builtin\">type</span> <span class=\"token operator\">and</span> points to print_stuff function<span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">//</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> lets us know what TYPE are the arguments <span class=\"token keyword\">for</span> the function<span class=\"token punctuation\">.</span>\n  void <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>print_stuff<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token operator\">//</span> To call the function<span class=\"token punctuation\">,</span> we go<span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">//</span> Here<span class=\"token punctuation\">,</span> we dereferenced the pointer <span class=\"token operator\">and</span> also passed <span class=\"token keyword\">in</span> inputs <span class=\"token keyword\">for</span> it<span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">//</span> Note this also works even <span class=\"token keyword\">if</span> we removed the <span class=\"token operator\">*</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Hi there, I am 20</p>\n</blockquote>\n<p>Note that when we declared our function pointer, it is extremely important that we have those brackets around *func_ptr or else it will be confused for a declaration of a function that returns void pointers. </p>\n<p>A clearer illustration of when we would use a function pointer would be when we don’t know what the functions are at compile time.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#include &lt;stdio.h></span>\n\n<span class=\"token operator\">//</span> Here we declare a function<span class=\"token punctuation\">.</span>\nvoid do_stuff<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">int</span> main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    void <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>do_stuff<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nvoid do_stuff<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Done stuff with %d\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Done stuff with 4</p>\n</blockquote>\n<p>So why else might we be bothered with function pointers?</p>\n<ul>\n<li>Efficiency</li>\n<li>Elegance</li>\n<li>Runtime binding whereby we can change the function up depending on what we feed the function at runtime</li>\n</ul>\n<p>Note that with these pointers, we do not need to de-allocate memory as we are not pointing to memory.</p>\n<hr>\n<p>Here's another example just to drill this home:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">// Our function\nint add_numbers(int x, int y)\n{\n  return x + y;\n}\n\n// Our FUNCTION POINTER:\nint (*func_ptr)(int, int);\n\n// Again, this points to a function that returns an int and takes in 2 ints as arguments.\n\n// Now to point it to a function:\nfunc_ptr = &amp;add_numbers;\n\n// To actually use this function pointer:\nint sum = (*func_ptr)(5, 10);\n\n// Here, we dereference our function pointer and pass in our arguments for the function.\n\n// Altenrative\nint sum = func_ptr(5, 10);</code></pre></div>\n<h2>Summary</h2>\n<p>Function pointers are just an address referring to an area of memory with executable code.</p>","frontmatter":{"title":"Final Tips","description":"Putting all the steps together"}}},"pageContext":{"slug":"/Week 6: Putting It All Together/wrapup/"}}