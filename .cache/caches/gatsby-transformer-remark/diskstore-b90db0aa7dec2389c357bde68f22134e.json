{"expireTime":9007200800480591000,"key":"transformer-remark-markdown-ast-c49b8b30021bc65e721286ed4507540f-gatsby-remark-prismjsgatsby-remark-katexgatsby-remark-images-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Introduction","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":16,"offset":16},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":16,"offset":16},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Function pointers are literally pointers to functions.","position":{"start":{"line":3,"column":3,"offset":19},"end":{"line":3,"column":57,"offset":73},"indent":[]}}],"position":{"start":{"line":3,"column":3,"offset":19},"end":{"line":3,"column":57,"offset":73},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":17},"end":{"line":3,"column":57,"offset":73},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Function pointers are just what their name suggests, they are pointers to functions! In particular, a function pointer points to code (rather than data like what we are normally used to) and stores the start of executable code. Let’s just get straight to some code.","position":{"start":{"line":5,"column":1,"offset":75},"end":{"line":5,"column":266,"offset":340},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":75},"end":{"line":5,"column":266,"offset":340},"indent":[]}},{"type":"html","lang":"python","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">void print_stuff<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi there, I am %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">int</span> main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">//</span> Pointer <span class=\"token keyword\">is</span> void <span class=\"token builtin\">type</span> <span class=\"token operator\">and</span> points to print_stuff function<span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">//</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> lets us know what TYPE are the arguments <span class=\"token keyword\">for</span> the function<span class=\"token punctuation\">.</span>\n  void <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>print_stuff<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token operator\">//</span> To call the function<span class=\"token punctuation\">,</span> we go<span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">//</span> Here<span class=\"token punctuation\">,</span> we dereferenced the pointer <span class=\"token operator\">and</span> also passed <span class=\"token keyword\">in</span> inputs <span class=\"token keyword\">for</span> it<span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">//</span> Note this also works even <span class=\"token keyword\">if</span> we removed the <span class=\"token operator\">*</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":7,"column":1,"offset":342},"end":{"line":25,"column":4,"offset":788},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Hi there, I am 20","position":{"start":{"line":27,"column":1,"offset":791},"end":{"line":27,"column":18,"offset":808},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":791},"end":{"line":27,"column":18,"offset":808},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":789},"end":{"line":27,"column":18,"offset":808},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Note that when we declared our function pointer, it is extremely important that we have those brackets around ","position":{"start":{"line":29,"column":1,"offset":810},"end":{"line":29,"column":111,"offset":920},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":29,"column":111,"offset":920},"end":{"line":29,"column":113,"offset":922},"indent":[]}},{"type":"text","value":"func_ptr or else it will be confused for a declaration of a function that returns void pointers. ","position":{"start":{"line":29,"column":113,"offset":922},"end":{"line":29,"column":210,"offset":1019},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":810},"end":{"line":29,"column":210,"offset":1019},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A clearer illustration of when we would use a function pointer would be when we don’t know what the functions are at compile time.","position":{"start":{"line":31,"column":1,"offset":1021},"end":{"line":31,"column":131,"offset":1151},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1021},"end":{"line":31,"column":131,"offset":1151},"indent":[]}},{"type":"html","lang":"C","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n\n// Here we declare a function.\nvoid do_stuff(int x);\n\nint main()\n{\n    void (*func_ptr)(int) = &amp;do_stuff;\n    (*func_ptr)(4);\n}\n\nvoid do_stuff(int x)\n{\n  printf(&quot;Done stuff with %d\\n&quot;,x);\n}</code></pre></div>","position":{"start":{"line":33,"column":1,"offset":1153},"end":{"line":49,"column":4,"offset":1371},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Done stuff with 4","position":{"start":{"line":51,"column":3,"offset":1375},"end":{"line":51,"column":20,"offset":1392},"indent":[]}}],"position":{"start":{"line":51,"column":3,"offset":1375},"end":{"line":51,"column":20,"offset":1392},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1373},"end":{"line":51,"column":20,"offset":1392},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So why else might we be bothered with function pointers?","position":{"start":{"line":53,"column":1,"offset":1394},"end":{"line":53,"column":57,"offset":1450},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1394},"end":{"line":53,"column":57,"offset":1450},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Efficiency","position":{"start":{"line":54,"column":3,"offset":1453},"end":{"line":54,"column":13,"offset":1463},"indent":[]}}],"position":{"start":{"line":54,"column":3,"offset":1453},"end":{"line":54,"column":13,"offset":1463},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1451},"end":{"line":54,"column":13,"offset":1463},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Elegance","position":{"start":{"line":55,"column":3,"offset":1466},"end":{"line":55,"column":11,"offset":1474},"indent":[]}}],"position":{"start":{"line":55,"column":3,"offset":1466},"end":{"line":55,"column":11,"offset":1474},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1464},"end":{"line":55,"column":11,"offset":1474},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Runtime binding whereby we can change the function up depending on what we feed the function at runtime","position":{"start":{"line":56,"column":3,"offset":1477},"end":{"line":56,"column":106,"offset":1580},"indent":[]}}],"position":{"start":{"line":56,"column":3,"offset":1477},"end":{"line":56,"column":106,"offset":1580},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1475},"end":{"line":56,"column":106,"offset":1580},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1451},"end":{"line":56,"column":106,"offset":1580},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note that with these pointers, we do not need to de-allocate memory as we are not pointing to memory.","position":{"start":{"line":58,"column":1,"offset":1582},"end":{"line":58,"column":102,"offset":1683},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1582},"end":{"line":58,"column":102,"offset":1683},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":60,"column":1,"offset":1685},"end":{"line":60,"column":4,"offset":1688},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's another example just to drill this home:","position":{"start":{"line":62,"column":1,"offset":1690},"end":{"line":62,"column":48,"offset":1737},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1690},"end":{"line":62,"column":48,"offset":1737},"indent":[]}},{"type":"html","lang":"C","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">// Our function\nint add_numbers(int x, int y)\n{\n  return x + y;\n}\n\n// Our FUNCTION POINTER:\nint (*func_ptr)(int, int);\n\n// Again, this points to a function that returns an int and takes in 2 ints as arguments.\n\n// Now to point it to a function:\nfunc_ptr = &amp;add_numbers;\n\n// To actually use this function pointer:\nint sum = (*func_ptr)(5, 10);\n\n// Here, we dereference our function pointer and pass in our arguments for the function.\n\n// Altenrative\nint sum = func_ptr(5, 10);</code></pre></div>","position":{"start":{"line":63,"column":1,"offset":1738},"end":{"line":85,"column":4,"offset":2222},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Summary","position":{"start":{"line":87,"column":4,"offset":2227},"end":{"line":87,"column":11,"offset":2234},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":2224},"end":{"line":87,"column":11,"offset":2234},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Function pointers are just an address referring to an area of memory with executable code.","position":{"start":{"line":88,"column":1,"offset":2235},"end":{"line":88,"column":91,"offset":2325},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2235},"end":{"line":88,"column":91,"offset":2325},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":88,"column":91,"offset":2325}}}}