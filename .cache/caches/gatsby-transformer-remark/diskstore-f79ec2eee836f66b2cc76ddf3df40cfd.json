{"expireTime":9007200800962442000,"key":"transformer-remark-markdown-html-ast-3925263e138a3de9cde1d7f4ef38fdbc-gatsby-remark-prismjsgatsby-remark-katexgatsby-remark-images-","val":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Introduction","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":16,"offset":16}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":16,"offset":16}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Function pointers are literally pointers to functions.","position":{"start":{"line":3,"column":3,"offset":19},"end":{"line":3,"column":57,"offset":73}}}],"position":{"start":{"line":3,"column":3,"offset":19},"end":{"line":3,"column":57,"offset":73}}},{"type":"text","value":"\n"}],"position":{"start":{"line":3,"column":1,"offset":17},"end":{"line":3,"column":57,"offset":73}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Function pointers are just what their name suggests, they are pointers to functions! In particular, a function pointer points to code (rather than data like what we are normally used to) and stores the start of executable code. Let’s just get straight to some code.","position":{"start":{"line":5,"column":1,"offset":75},"end":{"line":5,"column":266,"offset":340}}}],"position":{"start":{"line":5,"column":1,"offset":75},"end":{"line":5,"column":266,"offset":340}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">void print_stuff<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi there, I am %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">int</span> main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">//</span> Pointer <span class=\"token keyword\">is</span> void <span class=\"token builtin\">type</span> <span class=\"token operator\">and</span> points to print_stuff function<span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">//</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> lets us know what TYPE are the arguments <span class=\"token keyword\">for</span> the function<span class=\"token punctuation\">.</span>\n  void <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>print_stuff<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token operator\">//</span> To call the function<span class=\"token punctuation\">,</span> we go<span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">//</span> Here<span class=\"token punctuation\">,</span> we dereferenced the pointer <span class=\"token operator\">and</span> also passed <span class=\"token keyword\">in</span> inputs <span class=\"token keyword\">for</span> it<span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">//</span> Note this also works even <span class=\"token keyword\">if</span> we removed the <span class=\"token operator\">*</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":7,"column":1,"offset":342},"end":{"line":25,"column":4,"offset":788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hi there, I am 20","position":{"start":{"line":27,"column":1,"offset":791},"end":{"line":27,"column":18,"offset":808}}}],"position":{"start":{"line":27,"column":1,"offset":791},"end":{"line":27,"column":18,"offset":808}}},{"type":"text","value":"\n"}],"position":{"start":{"line":26,"column":1,"offset":789},"end":{"line":27,"column":18,"offset":808}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that when we declared our function pointer, it is extremely important that we have those brackets around ","position":{"start":{"line":29,"column":1,"offset":810},"end":{"line":29,"column":111,"offset":920}}},{"type":"text","value":"*","position":{"start":{"line":29,"column":111,"offset":920},"end":{"line":29,"column":113,"offset":922}}},{"type":"text","value":"func_ptr or else it will be confused for a declaration of a function that returns void pointers. ","position":{"start":{"line":29,"column":113,"offset":922},"end":{"line":29,"column":210,"offset":1019}}}],"position":{"start":{"line":29,"column":1,"offset":810},"end":{"line":29,"column":210,"offset":1019}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A clearer illustration of when we would use a function pointer would be when we don’t know what the functions are at compile time.","position":{"start":{"line":31,"column":1,"offset":1021},"end":{"line":31,"column":131,"offset":1151}}}],"position":{"start":{"line":31,"column":1,"offset":1021},"end":{"line":31,"column":131,"offset":1151}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#include &lt;stdio.h></span>\n\n<span class=\"token operator\">//</span> Here we declare a function<span class=\"token punctuation\">.</span>\nvoid do_stuff<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">int</span> main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    void <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>do_stuff<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nvoid do_stuff<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Done stuff with %d\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":33,"column":1,"offset":1153},"end":{"line":49,"column":4,"offset":1376}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Done stuff with 4","position":{"start":{"line":51,"column":3,"offset":1380},"end":{"line":51,"column":20,"offset":1397}}}],"position":{"start":{"line":51,"column":3,"offset":1380},"end":{"line":51,"column":20,"offset":1397}}},{"type":"text","value":"\n"}],"position":{"start":{"line":51,"column":1,"offset":1378},"end":{"line":51,"column":20,"offset":1397}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So why else might we be bothered with function pointers?","position":{"start":{"line":53,"column":1,"offset":1399},"end":{"line":53,"column":57,"offset":1455}}}],"position":{"start":{"line":53,"column":1,"offset":1399},"end":{"line":53,"column":57,"offset":1455}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Efficiency","position":{"start":{"line":54,"column":3,"offset":1458},"end":{"line":54,"column":13,"offset":1468}}}],"position":{"start":{"line":54,"column":1,"offset":1456},"end":{"line":54,"column":13,"offset":1468}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Elegance","position":{"start":{"line":55,"column":3,"offset":1471},"end":{"line":55,"column":11,"offset":1479}}}],"position":{"start":{"line":55,"column":1,"offset":1469},"end":{"line":55,"column":11,"offset":1479}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Runtime binding whereby we can change the function up depending on what we feed the function at runtime","position":{"start":{"line":56,"column":3,"offset":1482},"end":{"line":56,"column":106,"offset":1585}}}],"position":{"start":{"line":56,"column":1,"offset":1480},"end":{"line":56,"column":106,"offset":1585}}},{"type":"text","value":"\n"}],"position":{"start":{"line":54,"column":1,"offset":1456},"end":{"line":56,"column":106,"offset":1585}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that with these pointers, we do not need to de-allocate memory as we are not pointing to memory.","position":{"start":{"line":58,"column":1,"offset":1587},"end":{"line":58,"column":102,"offset":1688}}}],"position":{"start":{"line":58,"column":1,"offset":1587},"end":{"line":58,"column":102,"offset":1688}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":60,"column":1,"offset":1690},"end":{"line":60,"column":4,"offset":1693}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here's another example just to drill this home:","position":{"start":{"line":62,"column":1,"offset":1695},"end":{"line":62,"column":48,"offset":1742}}}],"position":{"start":{"line":62,"column":1,"offset":1695},"end":{"line":62,"column":48,"offset":1742}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">//</span> Our function\n<span class=\"token builtin\">int</span> add_numbers<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">//</span> Our FUNCTION POINTER<span class=\"token punctuation\">:</span>\n<span class=\"token builtin\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">//</span> Again<span class=\"token punctuation\">,</span> this points to a function that returns an <span class=\"token builtin\">int</span> <span class=\"token operator\">and</span> takes <span class=\"token keyword\">in</span> <span class=\"token number\">2</span> ints <span class=\"token keyword\">as</span> arguments<span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">//</span> Now to point it to a function<span class=\"token punctuation\">:</span>\nfunc_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>add_numbers<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">//</span> To actually use this function pointer<span class=\"token punctuation\">:</span>\n<span class=\"token builtin\">int</span> <span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">//</span> Here<span class=\"token punctuation\">,</span> we dereference our function pointer <span class=\"token operator\">and</span> <span class=\"token keyword\">pass</span> <span class=\"token keyword\">in</span> our arguments <span class=\"token keyword\">for</span> the function<span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">//</span> Altenrative\n<span class=\"token builtin\">int</span> <span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> func_ptr<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":63,"column":1,"offset":1743},"end":{"line":85,"column":4,"offset":2232}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Summary","position":{"start":{"line":87,"column":4,"offset":2237},"end":{"line":87,"column":11,"offset":2244}}}],"position":{"start":{"line":87,"column":1,"offset":2234},"end":{"line":87,"column":11,"offset":2244}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Function pointers are just an address referring to an area of memory with executable code.","position":{"start":{"line":88,"column":1,"offset":2245},"end":{"line":88,"column":91,"offset":2335}}}],"position":{"start":{"line":88,"column":1,"offset":2245},"end":{"line":88,"column":91,"offset":2335}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":88,"column":91,"offset":2335}}}}